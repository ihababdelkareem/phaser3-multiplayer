{"version":3,"sources":["constants.js","scenes/Bullet.js","scenes/Bullets.js","scenes/PlayGame.js","scenes/Welcome.js","scenes/Winner.js","index.js","assets/coin.svg","assets/spaceship.svg","assets/bullet.svg","assets/explosion.png","assets/exp.m4a","assets/shot.mp3","assets/coin_collect.wav"],"names":["Constants","WIDTH","HEIGHT","Bullet","scene","x","y","angle","angle_vel_map","this","body","reset","setAngle","setActive","setVisible","setVelocityY","String","parseInt","setVelocityX","time","delta","set_bullet","status","Phaser","Physics","Arcade","Sprite","Bullets","physics","world","disabled","createMultiple","frameQuantity","key","active","visible","classType","shot_fired","bullet","getFirstDead","fire","children","entries","map","Group","PlayGame","get_new_spaceship","score","name","score_text","add","text","color","align","fontSize","ship","sprite","cont","container","setSize","existing","setCollideWorldBounds","emit_coordinates","socket","emit","bullets","get_all_bullets","id","get_coin","coin","collider","coin_sound","play","Math","Between","setText","check_for_winner","get_enemy_bullets","enemy_bullets","i","setTimeout","emmit_collision","animate_explosion","length","update_enemy_bullets","bullet_sprites","others","bullet_user_id","bullet_index","max","anims","explosion_sound","players","other","push","sort","a","b","disconnect","start","ENDPOINT","console","log","keys","input","keyboard","createCursorKeys","space","addKey","Input","Keyboard","KeyCodes","SPACE","load","spritesheet","Explosion","frameWidth","frameHeight","endFrame","image","Coin","Spaceship","BulletIcon","audio","ExplosionSound","ShotSound","CoinSound","config","frames","generateFrameNumbers","end","first","frameRate","sound","shot_sound","create","io","on","params","callback","Object","other_id","other_x","other_y","others_bullets","exploded_user_id","p","c","destroy","keys_down","down","isDown","up","right","left","keys_angle","u","d","l","r","ur","ul","dr","dl","JustDown","fireBullet","Scene","Welcome","alpha","split","join","addKeys","backspace","BACKSPACE","enter","ENTER","welcome_text","substring","Winner","winner_text","type","AUTO","width","height","default","backgroundColor","game","Game","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f07b85f3.chunk.js","sourcesContent":["export default class Constants {\n  static WIDTH = 1200;\n  static HEIGHT = 720;\n}\n","import Phaser from \"phaser\";\nimport Constants from \"../constants\";\nexport default class Bullet extends Phaser.Physics.Arcade.Sprite {\n  constructor(scene, x, y) {\n    super(scene, x, y, \"bullet\");\n  }\n\n  fire(x, y, angle) {\n    const speed = 750;\n    const angle_vel_map = {\n      \"0\": [0, -speed],\n      \"-90\": [-speed, 0],\n      \"90\": [speed, 0],\n      \"-180\": [0, speed],\n      \"45\": [speed, -speed],\n      \"-45\": [-speed, -speed],\n      \"135\": [speed, speed],\n      \"-135\": [-speed, speed],\n    };\n    this.body.reset(x, y);\n    this.setAngle(angle);\n    this.setActive(true);\n    this.setVisible(true);\n    this.setVelocityY(angle_vel_map[String(parseInt(angle))][1]);\n    this.setVelocityX(angle_vel_map[String(parseInt(angle))][0]);\n  }\n\n  preUpdate(time, delta) {\n    super.preUpdate(time, delta);\n\n    if (\n      this.y <= -10 ||\n      this.y >= Constants.HEIGHT + 10 ||\n      this.x <= -10 ||\n      this.x >= Constants.WIDTH + 10\n    ) {\n      this.set_bullet(false);\n    }\n  }\n\n  set_bullet(status) {\n    this.setActive(status);\n    this.setVisible(status);\n  }\n}\n","import Phaser from \"phaser\";\nimport Bullet from \"./Bullet\";\nexport default class Bullets extends Phaser.Physics.Arcade.Group {\n  constructor(scene) {\n    super(scene.physics.world, scene);\n    this.disabled = false;\n    this.createMultiple({\n      frameQuantity: 1,\n      key: \"bullet\",\n      active: false,\n      visible: false,\n      classType: Bullet,\n    });\n  }\n\n  fireBullet(x, y, angle, shot_fired) {\n    let bullet = this.getFirstDead(false);\n    if (bullet) {\n      bullet.fire(x, y, angle);\n      shot_fired();\n    }\n  }\n\n  get_all_bullets() {\n    return this.children.entries.map((bullet) => {\n      return {\n        x: bullet.x,\n        y: bullet.y,\n        angle: bullet.angle,\n        active: bullet.active,\n        visible: bullet.visible,\n      };\n    });\n  }\n}\n","import Phaser from \"phaser\";\nimport Coin from \"../assets/coin.svg\";\nimport Spaceship from \"../assets/spaceship.svg\";\nimport BulletIcon from \"../assets/bullet.svg\";\nimport Bullets from \"./Bullets\";\nimport Explosion from \"../assets/explosion.png\";\nimport ExplosionSound from \"../assets/exp.m4a\";\nimport ShotSound from \"../assets/shot.mp3\";\nimport CoinSound from \"../assets/coin_collect.wav\";\nimport Constants from \"../constants\";\nimport io from \"socket.io-client\";\nclass PlayGame extends Phaser.Scene {\n  init(name) {\n    // Server endpoints (dev and prod)\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      this.ENDPOINT = \"192.168.1.107:5000\";\n    } else {\n      this.ENDPOINT = \"https://phaser3-game-react.herokuapp.com\";\n    }\n    console.log(this.ENDPOINT);\n    this.name = name;\n    this.keys = this.input.keyboard.createCursorKeys();\n    this.space = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.SPACE\n    );\n    this.score = 0;\n    this.others = {}; //to store other players\n    this.x = Phaser.Math.Between(50, Constants.WIDTH - 50); // random initial x,y coordinates\n    this.y = Phaser.Math.Between(50, Constants.HEIGHT - 50);\n  }\n  preload() {\n    //the sprites we need\n    this.load.spritesheet(\"boom\", Explosion, {\n      frameWidth: 64,\n      frameHeight: 64,\n      endFrame: 23,\n    });\n    this.load.image(\"coin\", Coin);\n    this.load.image(\"ship\", Spaceship);\n    this.load.image(\"bullet\", BulletIcon);\n    this.load.audio(\"explosion\", ExplosionSound);\n    this.load.audio(\"shot\", ShotSound);\n    this.load.audio(\"coin\", CoinSound);\n  }\n  create() {\n    var config = {\n      key: \"explode\",\n      frames: this.anims.generateFrameNumbers(\"boom\", {\n        start: 0,\n        end: 23,\n        first: 23,\n      }),\n      frameRate: 50,\n    };\n\n    this.explosion_sound = this.sound.add(\"explosion\");\n    this.shot_sound = this.sound.add(\"shot\");\n    this.coin_sound = this.sound.add(\"coin\");\n\n    this.anims.create(config);\n    this.ship = this.get_new_spaceship(\n      this.x,\n      this.y,\n      this.score,\n      this.name,\n      0\n    ); //Client's spaceship.\n    this.socket = io(this.ENDPOINT); //connect to server.\n    this.bullets = new Bullets(this);\n\n    /*\n    This is recieved once for each new user, the user gets their id,\n    and a map of all other user objects.\n    */\n    this.socket.on(\"to_new_user\", (params, callback) => {\n      this.id = params.id;\n      this.others = params.others;\n      /*\n      Render the spaceships of all other users, and coin object.\n      */\n      for (const key of Object.keys(this.others)) {\n        const x = this.others[key].x;\n        const y = this.others[key].y;\n        const score = this.others[key].score;\n        const name = this.others[key].name;\n        const angle = this.others[key].angle;\n        const bullets = this.others[key].bullets;\n        this.others[key].ship = this.get_new_spaceship(\n          x,\n          y,\n          score,\n          name,\n          angle\n        );\n        this.others[key].bullets = this.get_enemy_bullets(bullets, key);\n        this.others[key].score = score;\n        this.others[key].name = name;\n        this.check_for_winner(score);\n      }\n      this.coin = this.get_coin(params.coin.x, params.coin.y);\n      /*\n      Update server with coordinates.\n      */\n      this.emit_coordinates();\n    });\n\n    /*\n    Listen to server for updates on other users.\n    */\n    this.socket.on(\"to_others\", (params, callback) => {\n      const other_id = params.id;\n      const other_x = params.x;\n      const other_y = params.y;\n      const score = params.score;\n      const name = params.name;\n      const angle = params.angle;\n      const bullets = params.bullets;\n      /*\n      Either it's a new client, or an existing one with new info.\n      */\n      if (!(other_id in this.others)) {\n        var ship = this.get_new_spaceship(other_x, other_y, score, name, angle);\n        var others_bullets = this.get_enemy_bullets(bullets, other_id);\n        this.others[other_id] = {\n          x: other_x,\n          y: other_y,\n          ship: ship,\n          bullets: others_bullets,\n          score: score,\n          name: name,\n        };\n      } else {\n        this.others[other_id].ship.cont.x = other_x;\n        this.others[other_id].ship.cont.y = other_y;\n        this.others[other_id].ship.score_text.setText(`${name}: ${score}`);\n        this.others[other_id].ship.ship.setAngle(angle);\n        this.update_enemy_bullets(other_id, bullets);\n        this.others[other_id].score = score;\n        this.others[other_id].name = name;\n      }\n      this.check_for_winner(score);\n    });\n\n    /*\n    Listen for changes in the coordinates of the coin.\n    */\n    this.socket.on(\"coin_changed\", (params, callback) => {\n      this.coin_sound.play();\n      this.coin.x = params.coin.x;\n      this.coin.y = params.coin.y;\n    });\n\n    this.socket.on(\"other_collision\", (params, callback) => {\n      const other_id = params.bullet_user_id;\n      const bullet_index = params.bullet_index;\n      const exploded_user_id = params.exploded_user_id;\n      if (other_id === this.socket.id) {\n        this.bullets.children.entries[bullet_index].setVisible(false);\n      }\n      this.animate_explosion(exploded_user_id);\n    });\n\n    this.socket.on(\"other_shot\", (p, c) => this.shot_sound.play());\n    /*\n    Listen for disconnections of others.\n    */\n    this.socket.on(\"user_disconnected\", (params, callback) => {\n      this.others[params.id].ship.score_text.destroy();\n      this.others[params.id].ship.ship.destroy();\n      this.others[params.id].ship.cont.destroy();\n      delete this.others[params.id];\n    });\n  }\n\n  /*\n  Poll for arrow keys to move the spaceship.\n  */\n  update() {\n    const cont = this.ship.cont;\n    const ship = this.ship.ship;\n    const inc = 7;\n    var keys_down = \"\";\n    if (this.keys.down.isDown && cont.active) {\n      cont.y += inc;\n      keys_down += \"d\";\n    }\n    if (this.keys.up.isDown && cont.active) {\n      cont.y -= inc;\n      keys_down += \"u\";\n    }\n    if (this.keys.right.isDown && cont.active) {\n      cont.x += inc;\n      keys_down += \"r\";\n    }\n    if (this.keys.left.isDown && cont.active) {\n      cont.x -= inc;\n      keys_down += \"l\";\n    }\n    const keys_angle = {\n      u: 0,\n      d: 180,\n      l: 270,\n      r: 90,\n      ur: 45,\n      ul: -45,\n      dr: 135,\n      dl: 225,\n    };\n    if (keys_down in keys_angle) {\n      ship.setAngle(keys_angle[keys_down]);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.space)) {\n      this.bullets.fireBullet(\n        this.ship.cont.x,\n        this.ship.cont.y - 5,\n        this.ship.ship.angle,\n        () => {\n          this.socket.emit(\"shot\");\n          this.shot_sound.play();\n        }\n      );\n    }\n    this.emit_coordinates();\n  }\n\n  /*\n  Get a new game object consisting of:\n  spaceship sprite, name and score.\n  */\n  get_new_spaceship = (x, y, score, name, angle) => {\n    var score_text = this.add.text(-30, 25, `${name}: ${score}`, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"13px\",\n    });\n    var ship = this.add.sprite(0, 0, \"ship\");\n    ship.setAngle(angle);\n    var cont = this.add.container(x, y, [ship, score_text]);\n    cont.setSize(45, 45);\n    this.physics.add.existing(cont, false);\n    this.physics.add.existing(ship, false);\n    cont.body.setCollideWorldBounds(true);\n    return { score_text, ship, cont };\n  };\n\n  /*\n  Upon movement, inform the server of new coordinates.\n  */\n  emit_coordinates = () => {\n    this.socket.emit(\"update_coordinates\", {\n      x: this.ship.cont.x,\n      y: this.ship.cont.y,\n      score: this.score,\n      name: this.name,\n      angle: this.ship.ship.angle,\n      bullets: this.bullets.get_all_bullets(this.socket.id),\n    });\n  };\n\n  /*\n  Create coin object , and initiate a collider between the coin\n  and the clients ship.\n  */\n  get_coin = (x, y) => {\n    var coin = this.add.sprite(x, y, \"coin\");\n    this.physics.add.existing(coin, false);\n    this.physics.add.collider(coin, this.ship.ship, this.fire, null, this);\n    return coin;\n  };\n\n  /*\n  When a player overlaps with the coin,\n  the others are notified of its new position\n  by this callback.\n  */\n  fire = (coin) => {\n    this.coin_sound.play();\n    coin.x = Phaser.Math.Between(20, Constants.WIDTH - 20);\n    coin.y = Phaser.Math.Between(20, Constants.HEIGHT - 20);\n    this.score += 5;\n    this.ship.score_text.setText(`${this.name}: ${this.score}`);\n    this.socket.emit(\"update_coin\", {\n      x: coin.x,\n      y: coin.y,\n    });\n    this.check_for_winner(this.score);\n  };\n\n  get_enemy_bullets = (bullets, id) => {\n    var enemy_bullets = new Bullets(this);\n    for (let i = 0; i < bullets.length; i++) {\n      enemy_bullets.children.entries[i].setAngle(bullets[i].angle);\n      enemy_bullets.children.entries[i].setActive(bullets[i].active);\n      enemy_bullets.children.entries[i].setVisible(bullets[i].visible);\n      enemy_bullets.children.entries[i].x = bullets[i].x;\n      enemy_bullets.children.entries[i].y = bullets[i].y;\n      this.physics.add.collider(\n        enemy_bullets.children.entries[i],\n        this.ship.ship,\n        (bullet) => {\n          if (!bullet.disabled) {\n            this.emmit_collision(id, i);\n            this.animate_explosion(\"0\");\n            bullet.disabled = true;\n          } else {\n            setTimeout(() => {\n              bullet.disabled = false;\n            }, 100);\n          }\n        },\n        null,\n        this\n      );\n    }\n    return enemy_bullets;\n  };\n\n  update_enemy_bullets = (id, bullets) => {\n    var bullet_sprites = this.others[id].bullets;\n    for (var i = 0; i < bullets.length; i++) {\n      bullet_sprites.children.entries[i].x = bullets[i].x;\n      bullet_sprites.children.entries[i].y = bullets[i].y;\n      bullet_sprites.children.entries[i].setAngle(bullets[i].angle);\n      bullet_sprites.children.entries[i].setActive(bullets[i].active);\n      bullet_sprites.children.entries[i].setVisible(bullets[i].visible);\n    }\n  };\n\n  emmit_collision = (bullet_user_id, bullet_index) => {\n    this.socket.emit(\"collision\", { bullet_user_id, bullet_index });\n  };\n\n  animate_explosion = (id) => {\n    var ship;\n    if (id === \"0\") {\n      ship = this.ship.cont;\n      ship.setActive(false);\n      this.score = Math.max(0, this.score - 2);\n      this.ship.score_text.setText(`${this.name}: ${this.score}`);\n      setTimeout(() => {\n        ship.setActive(true);\n      }, 1000);\n    } else {\n      ship = this.others[id].ship.cont;\n    }\n    var boom = this.add.sprite(ship.x, ship.y, \"boom\");\n    boom.anims.play(\"explode\");\n    this.explosion_sound.play();\n  };\n\n  check_for_winner = (score) => {\n    if (score >= 100) {\n      let players = [{ name: this.name, score: this.score }];\n      for (let other in this.others) {\n        players.push({\n          name: this.others[other].name,\n          score: this.others[other].score,\n        });\n      }\n      players = players.sort((a, b) => b.score - a.score);\n      setTimeout(() => this.socket.disconnect(), 20);\n      this.scene.start(\"winner\", players);\n    }\n  };\n}\n\nexport default PlayGame;\n","import Phaser from \"phaser\";\nexport default class Welcome extends Phaser.Scene {\n  init() {\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").join(\",\");\n    this.keys = this.input.keyboard.addKeys(alpha);\n    this.backspace = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.BACKSPACE\n    );\n    this.enter = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.ENTER\n    );\n  }\n  create() {\n    this.welcome_text = `Welcome, enter your name\\n\\n`;\n    this.text = this.add.text(450, 250, this.welcome_text, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"20px\",\n    });\n    this.name = \"\";\n  }\n  update() {\n    /*\n    Poll for keyboard keys to display name, and for enter to go to game scene.\n    */\n    for (const key of Object.keys(this.keys)) {\n      if (Phaser.Input.Keyboard.JustDown(this.keys[key])) {\n        if (this.name.length < 15) {\n          this.name += key;\n        }\n      }\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.backspace)) {\n      this.name = this.name.substring(0, this.name.length - 1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.enter)) {\n      this.scene.start(\"playgame\", this.name);\n    }\n    this.text.setText(this.welcome_text + this.name);\n  }\n}\n","import Phaser from \"phaser\";\nexport default class Winner extends Phaser.Scene {\n  init(players) {\n    this.players = players;\n    this.enter = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.ENTER\n    );\n  }\n  create() {\n    this.winner_text = `Winner is ${this.players[0].name}\\n\\nScoreboard:\\n--------------------\\n`;\n    for (let p in this.players) {\n      this.winner_text += `${this.players[p].name}: ${this.players[p].score}\\n`;\n    }\n    this.winner_text += \"\\n\\nPress Enter to play again\";\n    this.text = this.add.text(450, 50, this.winner_text, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"20px\",\n    });\n  }\n  update() {\n    if (this.enter.isDown) {\n      this.scene.start(\"playgame\");\n    }\n    /*\n    Poll for keyboard keys to display name, and for enter to go to game scene.\n    */\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Phaser from \"phaser\";\nimport PlayGame from \"./scenes/PlayGame\";\nimport Welcome from \"./scenes/Welcome\";\nimport Winner from \"./scenes/Winner\";\nimport Constants from \"./constants\";\nexport const config = {\n  type: Phaser.AUTO,\n  width: Constants.WIDTH,\n  height: Constants.HEIGHT,\n  physics: { default: \"arcade\" },\n  backgroundColor: \"#202830\",\n};\n\nconst game = new Phaser.Game(config);\ngame.scene.add(\"playgame\", PlayGame);\ngame.scene.add(\"welcome\", Welcome);\ngame.scene.add(\"winner\", Winner);\ngame.scene.start(\"welcome\");\n\nReactDOM.render(null, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/coin.87cc3c60.svg\";","module.exports = __webpack_public_path__ + \"static/media/spaceship.1121fa40.svg\";","module.exports = __webpack_public_path__ + \"static/media/bullet.419a6b56.svg\";","module.exports = __webpack_public_path__ + \"static/media/explosion.5ddcf208.png\";","module.exports = __webpack_public_path__ + \"static/media/exp.34c43c52.m4a\";","module.exports = __webpack_public_path__ + \"static/media/shot.07c74a5b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/coin_collect.238d934d.wav\";"],"sourceRoot":""}