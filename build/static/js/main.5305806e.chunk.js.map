{"version":3,"sources":["scenes/Bullet.js","scenes/Bullets.js","scenes/PlayGame.js","scenes/Welcome.js","scenes/Winner.js","App.js","index.js","assets/coin.svg","assets/spaceship.svg","assets/bullet.svg","assets/explosion.png"],"names":["Bullet","scene","x","y","angle","angle_vel_map","this","body","reset","setAngle","setActive","setVisible","setVelocityY","String","parseInt","setVelocityX","time","delta","set_bullet","status","Phaser","Physics","Arcade","Sprite","Bullets","physics","world","disabled","createMultiple","frameQuantity","key","active","visible","classType","bullet","getFirstDead","fire","children","entries","map","Group","PlayGame","get_new_spaceship","score","name","score_text","add","text","color","align","fontSize","ship","sprite","cont","container","setSize","existing","setCollideWorldBounds","emit_coordinates","socket","emit","bullets","get_all_bullets","id","get_coin","coin","collider","Math","Between","setText","check_for_winner","get_enemy_bullets","enemy_bullets","i","setTimeout","emmit_collision","animate_explosion","length","update_enemy_bullets","bullet_sprites","others","bullet_user_id","bullet_index","max","anims","play","players","other","push","sort","a","b","disconnect","start","ENDPOINT","console","log","keys","input","keyboard","createCursorKeys","space","addKey","Input","Keyboard","KeyCodes","SPACE","load","spritesheet","Explosion","frameWidth","frameHeight","endFrame","image","Coin","Spaceship","BulletIcon","config","frames","generateFrameNumbers","end","first","frameRate","create","io","on","params","callback","Object","other_id","other_x","other_y","others_bullets","exploded_user_id","destroy","keys_down","down","isDown","up","right","left","keys_angle","u","d","l","r","ur","ul","dr","dl","JustDown","fireBullet","Scene","Welcome","alpha","split","join","addKeys","backspace","BACKSPACE","enter","ENTER","welcome_text","substring","Winner","p","winner_text","App","type","AUTO","width","height","default","backgroundColor","game","Game","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5305806e.chunk.js","sourcesContent":["import Phaser from \"phaser\";\nexport default class Bullet extends Phaser.Physics.Arcade.Sprite {\n  constructor(scene, x, y) {\n    super(scene, x, y, \"bullet\");\n  }\n\n  fire(x, y, angle) {\n    const speed = 750;\n    const angle_vel_map = {\n      \"0\": [0, -speed],\n      \"-90\": [-speed, 0],\n      \"90\": [speed, 0],\n      \"-180\": [0, speed],\n      \"45\": [speed, -speed],\n      \"-45\": [-speed, -speed],\n      \"135\": [speed, speed],\n      \"-135\": [-speed, speed],\n    };\n    this.body.reset(x, y);\n    this.setAngle(angle);\n    this.setActive(true);\n    this.setVisible(true);\n    this.setVelocityY(angle_vel_map[String(parseInt(angle))][1]);\n    this.setVelocityX(angle_vel_map[String(parseInt(angle))][0]);\n  }\n\n  preUpdate(time, delta) {\n    super.preUpdate(time, delta);\n\n    if (this.y <= -10 || this.y >= 610 || this.x <= -10 || this.x >= 810) {\n      this.set_bullet(false);\n    }\n  }\n\n  set_bullet(status) {\n    this.setActive(status);\n    this.setVisible(status);\n  }\n}\n","import Phaser from \"phaser\";\nimport Bullet from \"./Bullet\";\nexport default class Bullets extends Phaser.Physics.Arcade.Group {\n  constructor(scene) {\n    super(scene.physics.world, scene);\n    this.disabled = false;\n    this.createMultiple({\n      frameQuantity: 5,\n      key: \"bullet\",\n      active: false,\n      visible: false,\n      classType: Bullet,\n    });\n  }\n\n  fireBullet(x, y, angle) {\n    let bullet = this.getFirstDead(false);\n    if (bullet) {\n      bullet.fire(x, y, angle);\n    }\n  }\n\n  get_all_bullets() {\n    return this.children.entries.map((bullet) => {\n      return {\n        x: bullet.x,\n        y: bullet.y,\n        angle: bullet.angle,\n        active: bullet.active,\n        visible: bullet.visible,\n      };\n    });\n  }\n}\n","import Phaser from \"phaser\";\nimport Coin from \"../assets/coin.svg\";\nimport Spaceship from \"../assets/spaceship.svg\";\nimport BulletIcon from \"../assets/bullet.svg\";\nimport Bullets from \"./Bullets\";\nimport Explosion from \"../assets/explosion.png\";\nimport io from \"socket.io-client\";\nclass PlayGame extends Phaser.Scene {\n  init(name) {\n    // Server endpoints (dev and prod)\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      this.ENDPOINT = \"localhost:5000\";\n    } else {\n      this.ENDPOINT = \"https://phaser3-game-react.herokuapp.com\";\n    }\n    console.log(this.ENDPOINT);\n    this.name = name;\n    this.keys = this.input.keyboard.createCursorKeys();\n    this.space = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.SPACE\n    );\n    this.score = 0;\n    this.others = {}; //to store other players\n    this.x = Phaser.Math.Between(50, 750); // random initial x,y coordinates\n    this.y = Phaser.Math.Between(50, 550);\n  }\n  preload() {\n    //the sprites we need\n    this.load.spritesheet(\"boom\", Explosion, {\n      frameWidth: 64,\n      frameHeight: 64,\n      endFrame: 23,\n    });\n    this.load.image(\"coin\", Coin);\n    this.load.image(\"ship\", Spaceship);\n    this.load.image(\"bullet\", BulletIcon);\n  }\n  create() {\n    var config = {\n      key: \"explode\",\n      frames: this.anims.generateFrameNumbers(\"boom\", {\n        start: 0,\n        end: 23,\n        first: 23,\n      }),\n      frameRate: 20,\n    };\n\n    this.anims.create(config);\n    this.ship = this.get_new_spaceship(\n      this.x,\n      this.y,\n      this.score,\n      this.name,\n      0\n    ); //Client's spaceship.\n    this.socket = io(this.ENDPOINT); //connect to server.\n    this.bullets = new Bullets(this);\n\n    /*\n    This is recieved once for each new user, the user gets their id,\n    and a map of all other user objects.\n    */\n    this.socket.on(\"to_new_user\", (params, callback) => {\n      this.id = params.id;\n      this.others = params.others;\n      /*\n      Render the spaceships of all other users, and coin object.\n      */\n      for (const key of Object.keys(this.others)) {\n        const x = this.others[key].x;\n        const y = this.others[key].y;\n        const score = this.others[key].score;\n        const name = this.others[key].name;\n        const angle = this.others[key].angle;\n        const bullets = this.others[key].bullets;\n        this.others[key].ship = this.get_new_spaceship(\n          x,\n          y,\n          score,\n          name,\n          angle\n        );\n        this.others[key].bullets = this.get_enemy_bullets(bullets, key);\n        this.others[key].score = score;\n        this.others[key].name = name;\n        this.check_for_winner(score);\n      }\n      this.coin = this.get_coin(params.coin.x, params.coin.y);\n      /*\n      Update server with coordinates.\n      */\n      this.emit_coordinates();\n    });\n\n    /*\n    Listen to server for updates on other users.\n    */\n    this.socket.on(\"to_others\", (params, callback) => {\n      const other_id = params.id;\n      const other_x = params.x;\n      const other_y = params.y;\n      const score = params.score;\n      const name = params.name;\n      const angle = params.angle;\n      const bullets = params.bullets;\n      /*\n      Either it's a new client, or an existing one with new info.\n      */\n      if (!(other_id in this.others)) {\n        var ship = this.get_new_spaceship(other_x, other_y, score, name, angle);\n        var others_bullets = this.get_enemy_bullets(bullets, other_id);\n        this.others[other_id] = {\n          x: other_x,\n          y: other_y,\n          ship: ship,\n          bullets: others_bullets,\n          score: score,\n          name: name,\n        };\n      } else {\n        this.others[other_id].ship.cont.x = other_x;\n        this.others[other_id].ship.cont.y = other_y;\n        this.others[other_id].ship.score_text.setText(`${name}: ${score}`);\n        this.others[other_id].ship.ship.setAngle(angle);\n        this.update_enemy_bullets(other_id, bullets);\n        this.others[other_id].score = score;\n        this.others[other_id].name = name;\n      }\n      this.check_for_winner(score);\n    });\n\n    /*\n    Listen for changes in the coordinates of the coin.\n    */\n    this.socket.on(\"coin_changed\", (params, callback) => {\n      this.coin.x = params.coin.x;\n      this.coin.y = params.coin.y;\n    });\n\n    this.socket.on(\"other_collision\", (params, callback) => {\n      const other_id = params.bullet_user_id;\n      const bullet_index = params.bullet_index;\n      const exploded_user_id = params.exploded_user_id;\n      if (other_id === this.socket.id) {\n        this.bullets.children.entries[bullet_index].set_bullet(false);\n      }\n      this.animate_explosion(exploded_user_id);\n    });\n\n    /*\n    Listen for disconnections of others.\n    */\n    this.socket.on(\"user_disconnected\", (params, callback) => {\n      this.others[params.id].ship.score_text.destroy();\n      this.others[params.id].ship.ship.destroy();\n      this.others[params.id].ship.cont.destroy();\n      delete this.others[params.id];\n    });\n  }\n\n  /*\n  Poll for arrow keys to move the spaceship.\n  */\n  update() {\n    const cont = this.ship.cont;\n    const ship = this.ship.ship;\n    const inc = 7;\n    var keys_down = \"\";\n    if (this.keys.down.isDown && cont.active) {\n      cont.y += inc;\n      keys_down += \"d\";\n    }\n    if (this.keys.up.isDown && cont.active) {\n      cont.y -= inc;\n      keys_down += \"u\";\n    }\n    if (this.keys.right.isDown && cont.active) {\n      cont.x += inc;\n      keys_down += \"r\";\n    }\n    if (this.keys.left.isDown && cont.active) {\n      cont.x -= inc;\n      keys_down += \"l\";\n    }\n    const keys_angle = {\n      u: 0,\n      d: 180,\n      l: 270,\n      r: 90,\n      ur: 45,\n      ul: -45,\n      dr: 135,\n      dl: 225,\n    };\n    if (keys_down in keys_angle) {\n      ship.setAngle(keys_angle[keys_down]);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.space)) {\n      this.bullets.fireBullet(\n        this.ship.cont.x,\n        this.ship.cont.y - 5,\n        this.ship.ship.angle\n      );\n    }\n    this.emit_coordinates();\n  }\n\n  /*\n  Get a new game object consisting of:\n  spaceship sprite, name and score.\n  */\n  get_new_spaceship = (x, y, score, name, angle) => {\n    var score_text = this.add.text(-30, 25, `${name}: ${score}`, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"13px\",\n    });\n    var ship = this.add.sprite(0, 0, \"ship\");\n    ship.setAngle(angle);\n    var cont = this.add.container(x, y, [ship, score_text]);\n    cont.setSize(45, 45);\n    this.physics.add.existing(cont, false);\n    this.physics.add.existing(ship, false);\n    cont.body.setCollideWorldBounds(true);\n    return { score_text, ship, cont };\n  };\n\n  /*\n  Upon movement, inform the server of new coordinates.\n  */\n  emit_coordinates = () => {\n    this.socket.emit(\"update_coordinates\", {\n      x: this.ship.cont.x,\n      y: this.ship.cont.y,\n      score: this.score,\n      name: this.name,\n      angle: this.ship.ship.angle,\n      bullets: this.bullets.get_all_bullets(this.socket.id),\n    });\n  };\n\n  /*\n  Create coin object , and initiate a collider between the coin\n  and the clients ship.\n  */\n  get_coin = (x, y) => {\n    var coin = this.add.sprite(x, y, \"coin\");\n    this.physics.add.existing(coin, false);\n    this.physics.add.collider(coin, this.ship.ship, this.fire, null, this);\n    return coin;\n  };\n\n  /*\n  When a player overlaps with the coin,\n  the others are notified of its new position\n  by this callback.\n  */\n  fire = (coin) => {\n    coin.x = Phaser.Math.Between(20, 780);\n    coin.y = Phaser.Math.Between(20, 580);\n    this.score += 5;\n    this.ship.score_text.setText(`${this.name}: ${this.score}`);\n    this.socket.emit(\"update_coin\", {\n      x: coin.x,\n      y: coin.y,\n    });\n    this.check_for_winner(this.score);\n  };\n\n  get_enemy_bullets = (bullets, id) => {\n    var enemy_bullets = new Bullets(this);\n    for (let i = 0; i < bullets.length; i++) {\n      enemy_bullets.children.entries[i].setAngle(bullets[i].angle);\n      enemy_bullets.children.entries[i].setActive(bullets[i].active);\n      enemy_bullets.children.entries[i].setVisible(bullets[i].visible);\n      enemy_bullets.children.entries[i].x = bullets[i].x;\n      enemy_bullets.children.entries[i].y = bullets[i].y;\n      this.physics.add.collider(\n        enemy_bullets.children.entries[i],\n        this.ship.ship,\n        (bullet) => {\n          if (!bullet.disabled) {\n            this.emmit_collision(id, i);\n            this.animate_explosion(\"0\");\n            bullet.disabled = true;\n          } else {\n            setTimeout(() => {\n              bullet.disabled = false;\n            }, 100);\n          }\n        },\n        null,\n        this\n      );\n    }\n    return enemy_bullets;\n  };\n\n  update_enemy_bullets = (id, bullets) => {\n    var bullet_sprites = this.others[id].bullets;\n    for (var i = 0; i < bullets.length; i++) {\n      bullet_sprites.children.entries[i].x = bullets[i].x;\n      bullet_sprites.children.entries[i].y = bullets[i].y;\n      bullet_sprites.children.entries[i].setAngle(bullets[i].angle);\n      bullet_sprites.children.entries[i].setActive(bullets[i].active);\n      bullet_sprites.children.entries[i].setVisible(bullets[i].visible);\n    }\n  };\n\n  emmit_collision = (bullet_user_id, bullet_index) => {\n    this.socket.emit(\"collision\", { bullet_user_id, bullet_index });\n  };\n\n  animate_explosion = (id) => {\n    var ship;\n    if (id === \"0\") {\n      ship = this.ship.cont;\n      ship.setActive(false);\n      this.score = Math.max(0, this.score - 2);\n      this.ship.score_text.setText(`${this.name}: ${this.score}`);\n      setTimeout(() => {\n        ship.setActive(true);\n      }, 1000);\n    } else {\n      ship = this.others[id].ship.cont;\n    }\n    var boom = this.add.sprite(ship.x, ship.y, \"boom\");\n    boom.anims.play(\"explode\");\n  };\n\n  check_for_winner = (score) => {\n    if (score >= 100) {\n      let players = [{ name: this.name, score: this.score }];\n      for (let other in this.others) {\n        players.push({\n          name: this.others[other].name,\n          score: this.others[other].score,\n        });\n      }\n      players = players.sort((a, b) => b.score - a.score);\n      setTimeout(() => this.socket.disconnect(), 20);\n      this.scene.start(\"winner\", players);\n    }\n  };\n}\n\nexport default PlayGame;\n","import Phaser from \"phaser\";\nexport default class Welcome extends Phaser.Scene {\n  init() {\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").join(\",\");\n    this.keys = this.input.keyboard.addKeys(alpha);\n    this.backspace = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.BACKSPACE\n    );\n    this.enter = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.ENTER\n    );\n  }\n  create() {\n    this.welcome_text = `Welcome, enter your name\\n\\n`;\n    this.text = this.add.text(250, 250, this.welcome_text, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"20px\",\n    });\n    this.name = \"\";\n  }\n  update() {\n    /*\n    Poll for keyboard keys to display name, and for enter to go to game scene.\n    */\n    for (const key of Object.keys(this.keys)) {\n      if (Phaser.Input.Keyboard.JustDown(this.keys[key])) {\n        if (this.name.length < 15) {\n          this.name += key;\n        }\n      }\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.backspace)) {\n      this.name = this.name.substring(0, this.name.length - 1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.enter)) {\n      this.scene.start(\"playgame\", this.name);\n    }\n    this.text.setText(this.welcome_text + this.name);\n  }\n}\n","import Phaser from \"phaser\";\nexport default class Winner extends Phaser.Scene {\n  init(players) {\n    this.players = players;\n    this.enter = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.ENTER\n    );\n  }\n  create() {\n    this.winner_text = `Winner is ${this.players[0].name}\\n\\nScoreboard:\\n--------------------\\n`;\n    for (let p in this.players) {\n      this.winner_text += `${this.players[p].name}: ${this.players[p].score}\\n`;\n    }\n    this.winner_text += \"\\n\\nPress Enter to play again\";\n    this.text = this.add.text(250, 50, this.winner_text, {\n      color: \"#00ff00\",\n      align: \"center\",\n      fontSize: \"20px\",\n    });\n  }\n  update() {\n    if (this.enter.isDown) {\n      this.scene.start(\"playgame\");\n    }\n    /*\n    Poll for keyboard keys to display name, and for enter to go to game scene.\n    */\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>Hello</p>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Phaser from \"phaser\";\nimport PlayGame from \"./scenes/PlayGame\";\nimport Welcome from \"./scenes/Welcome\";\nimport Winner from \"./scenes/Winner\";\nimport React from \"react\";\nimport App from \"./App\";\nexport const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: { default: \"arcade\" },\n  backgroundColor: \"#202830\",\n};\n\nconst game = new Phaser.Game(config);\ngame.scene.add(\"playgame\", PlayGame);\ngame.scene.add(\"welcome\", Welcome);\ngame.scene.add(\"winner\", Winner);\ngame.scene.start(\"welcome\");\n\nReactDOM.render(null, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/coin.87cc3c60.svg\";","module.exports = __webpack_public_path__ + \"static/media/spaceship.1121fa40.svg\";","module.exports = __webpack_public_path__ + \"static/media/bullet.419a6b56.svg\";","module.exports = __webpack_public_path__ + \"static/media/explosion.5ddcf208.png\";"],"sourceRoot":""}